use('conteudo_trybe');
db.scores.insertOne(
  { _id: 1, highScore: 800, lowScore: 200 }
);

use('conteudo_trybe');
db.scores.find({});

//Exemplo 1: Comparando números
// No documento de exemplo, o valor atual do campo lowscore é 200. A operação abaixo utiliza o $min para comparar 200 com o valor especificado 150 e altera o valor do campo lowscore para 150 porquê 150 é menor do que 200:


use('conteudo_trybe');
db.scores.updateOne({ _id: 1 }, { $min: { lowScore: 150 } });

// Exemplo 2:
// Atualmente, o campo highscore tem o valor 800. A operação abaixo usa o $max para comparar 800 e o valor especificado 950, e então altera o valor do campo highscore para 950 porque 950 é maior que 800:

use('conteudo_trybe');
db.scores.update({ _id: 1 }, { $max: { highScore: 950 } });

/////////////////
// Comparando Datas

use('conteudo_trybe');
db.tags.insertOne(
  {
    _id: 1,
    desc: "crafts",
    dateEntered: ISODate("2019-10-01T05:00:00Z"),
    dateExpired: ISODate("2019-10-01T16:38:16Z")
  }
);

use('conteudo_trybe');
db.tags.find({});


// Alterando a data com max e min
// A operação abaixo utiliza o operador $min para comparar o valor do campo dateEntered e altera seu valor, porque 25/09/2019 é uma data menor (anterior) do que o valor atual. Ao mesmo tempo, o operador $max também é usado para comparar o valor do campo dateExpired e altera esse valor, porque 02/10/2019 é uma data maior (posterior) do que o valor atual:


use('conteudo_trybe');
db.tags.update(
  { _id: 1 },
  {
    $min: { dateEntered: new Date("2019-09-25") },
    $max: { dateExpired: new Date("2019-10-02") }
  }
);